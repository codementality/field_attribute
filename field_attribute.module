<?php

/**
 * @file
 * Module file.
 */

use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Field\WidgetInterface;

/**
 * Implements hook_help().
 */
function field_attribute_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.field_attribute':
      $output = '<p>' . t('Field attributes allows you to add additional HTML attributes for any text field..') . '</p>';
      $output .= '<p>' . t('The field formatter attributes settings are found in the Manage display tab for content types, users, and other entities. A options element is available for each textfield field formatter, revealed by using the formatter settings edit button (Gear wheel icon) for that field.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_field_widget_third_party_settings_form().
 */
function field_attribute_field_widget_third_party_settings_form(WidgetInterface $plugin, FieldDefinitionInterface $field_definition, $form_mode, $form, FormStateInterface $form_state) {
  $element['field_attribute_maxlength'] = [
    '#type' => 'number',
    '#title' => t('Maxlength'),
    '#description' => t('The maximum number of characters in the field.'),
    '#default_value' => $plugin->getThirdPartySetting('field_attribute', 'field_attribute_maxlength'),
  ];
  $element['field_attribute_pattern'] = [
    '#type' => 'textfield',
    '#title' => t('Pattern'),
    '#description' => t('The pattern in the field. See <a href="@pattern" target="_blank">more</a> info about this attribute', ['@pattern' => 'https://www.w3schools.com/Tags/att_input_pattern.asp']),
    '#default_value' => $plugin->getThirdPartySetting('field_attribute', 'field_attribute_pattern'),
  ];
  $element['field_attribute_autofocus'] = [
    '#type' => 'select',
    '#title' => t('Autofocus'),
    '#options' => ['on' => t('On'), 'off' => t('Off')],
    '#empty_value' => '_none',
    '#description' => t('The autofocus in the field.'),
    '#default_value' => $plugin->getThirdPartySetting('field_attribute', 'field_attribute_autofocus'),
  ];
  $element['field_attribute_autocomplete'] = [
    '#type' => 'select',
    '#title' => t('Autocomplete'),
    '#options' => ['on' => t('On'), 'off' => t('Off')],
    '#empty_value' => '_none',
    '#description' => t('The autocomplete in the field.'),
    '#default_value' => $plugin->getThirdPartySetting('field_attribute', 'field_attribute_autocomplete'),
  ];
  $element['field_attribute_class'] = [
    '#type' => 'textfield',
    '#title' => t('Classes'),
    '#description' => t('Classes to apply to this field.'),
    '#default_value' => $plugin->getThirdPartySetting('field_attribute', 'field_attribute_class'),
  ];
  $element['field_attribute_data'] = [
    '#type' => 'textfield',
    '#title' => t('Data Attributes'),
    '#description' => t('Data attributes to apply to this field.'),
    '#default_value' => $plugin->getThirdPartySetting('field_attribute', 'field_attribute_data'),
  ];


  return $element;
}

/**
 * Implements hook_field_widget_settings_summary_alter().
 */
function field_attribute_field_widget_settings_summary_alter(&$summary, $context) {

  if ($context['field_definition']->getType() === 'string') {
    $third_party_settings = $context['widget']->getThirdPartySettings();

    if (!empty($third_party_settings['field_attribute']['field_attribute_maxlength'])) {
      $summary [] = t('Maxlength: @maxlength', ['@maxlength' => $third_party_settings['field_attribute']['field_attribute_maxlength']]);
    }
    if (!empty($third_party_settings['field_attribute']['field_attribute_pattern'])) {
      $summary [] = t('Pattern: @pattern', ['@pattern' => $third_party_settings['field_attribute']['field_attribute_pattern']]);
    }
    if (!empty($third_party_settings['field_attribute']['field_attribute_autofocus']) && $third_party_settings['field_attribute']['field_attribute_autofocus'] !== '_none') {
      $summary [] = t('Autofocus: @autofocus', ['@autofocus' => $third_party_settings['field_attribute']['field_attribute_autofocus']]);
    }
    if (!empty($third_party_settings['field_attribute']['field_attribute_autocomplete']) && $third_party_settings['field_attribute']['field_attribute_autocomplete'] !== '_none') {
      $summary [] = t('Autocomplete: @autocomplete', ['@autocomplete' => $third_party_settings['field_attribute']['field_attribute_autocomplete']]);
    }
  }
  if (!empty($third_party_settings['field_attribute']['field_attribute_class']) ) {
    $summary [] = t('Classes: @class', ['@class' => $third_party_settings['field_attribute']['field_attribute_class']]);
  }
  if (!empty($third_party_settings['field_attribute']['field_attribute_data']) ) {
    $summary [] = t('Data attributes: @data', ['@data' => $third_party_settings['field_attribute']['field_attribute_data']]);
  }

}

/**
 * Implements hook_field_widget_form_alter().
 */
function field_attribute_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  //dd($element);
  $third_party_settings = $context['widget']->getThirdPartySettings();
  $field_definition = $context['items']->getFieldDefinition();
  //dd($element);
  if ($field_definition->getType() === 'string') {
    if (!empty($third_party_settings['field_attribute']['field_attribute_maxlength'])) {
      $element['#attributes']['maxlength'] = $third_party_settings['field_attribute']['field_attribute_maxlength'];
    }
    if (!empty($third_party_settings['field_attribute']['field_attribute_pattern'])) {
      $element['#attributes']['pattern'] = $third_party_settings['field_attribute']['field_attribute_pattern'];
    }
    if (!empty($third_party_settings['field_attribute']['field_attribute_autofocus']) && $third_party_settings['field_attribute']['field_attribute_autofocus'] !== '_none') {
      $element['#attributes']['autofocus'] = $third_party_settings['field_attribute']['field_attribute_autofocus'];
    }
    if (!empty($third_party_settings['field_attribute']['field_attribute_autocomplete']) && $third_party_settings['field_attribute']['field_attribute_autocomplete'] !== '_none') {
      $element['#attributes']['autocomplete'] = $third_party_settings['field_attribute']['field_attribute_autocomplete'];
    }
  }

  if (!empty($third_party_settings['field_attribute']['field_attribute_class'])) {
    $element['value']['#attributes']['class'][]= $third_party_settings['field_attribute']['field_attribute_class'];
  }
  if (!empty($third_party_settings['field_attribute']['field_attribute_data'])) {
    $element['#attributes']['data'] = $third_party_settings['field_attribute']['field_attribute_data'];
  }
}

/**
 * Implement hook_preprocess_field().
 */
function field_attribute_preprocess_field(array &$variables) {
  $config_id = 'core.entity_form_display.' . $variables['element']['#entity_type'] . '.' . $variables['element']['#bundle'] . '.' . $variables['element']['#view_mode'];
  $config = \Drupal::config($config_id)->get('content');
  
  $field_name = $variables['field_name'];
  var_dump($field_name);
  if (!is_null($field_name) && !is_null($config)) {
    if(array_key_exists($field_name, $config)) {
      if (array_key_exists('field_attribute', $config[$field_name]['third_party_settings'])) {
        $variables['attributes']['class'][] = $config[$field_name]['third_party_settings']['field_attribute']['field_attribute_class'];
      }
    }
  }
}